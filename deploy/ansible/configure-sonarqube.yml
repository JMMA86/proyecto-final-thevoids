---
- name: Configure SonarQube on Azure VM
  hosts: sonarqube-vm
  become: yes
  gather_facts: yes

  vars:
    sonarqube_dir: /opt/sonarqube
    admin_user: "{{ ansible_user }}"

  tasks:
    - name: Wait for system to be fully ready
      wait_for_connection:
        timeout: 300

    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Ensure Docker is installed
      apt:
        name:
          - docker.io
          - docker-compose
        state: present

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add user to docker group
      user:
        name: "{{ admin_user }}"
        groups: docker
        append: yes

    - name: Configure system limits for SonarQube
      blockinfile:
        path: /etc/sysctl.conf
        block: |
          vm.max_map_count=524288
          fs.file-max=131072
        marker: "# {mark} ANSIBLE MANAGED BLOCK - SonarQube limits"
      notify: reload sysctl

    - name: Configure user limits for SonarQube
      blockinfile:
        path: /etc/security/limits.conf
        block: |
          {{ admin_user }} soft nofile 131072
          {{ admin_user }} hard nofile 131072
          {{ admin_user }} soft nproc 8192
          {{ admin_user }} hard nproc 8192
        marker: "# {mark} ANSIBLE MANAGED BLOCK - SonarQube user limits"

    - name: Apply sysctl settings immediately
      command: sysctl -p

    - name: Ensure SonarQube directory exists
      file:
        path: "{{ sonarqube_dir }}"
        state: directory
        owner: "{{ admin_user }}"
        group: "{{ admin_user }}"
        mode: "0755"

    - name: Create docker-compose.yml for SonarQube
      copy:
        content: |
          version: '3.8'

          services:
            sonarqube:
              image: sonarqube:latest
              ports:
                - "9000:9000"
              networks:
                - sonarnet
              environment:
                - SONARQUBE_JDBC_URL=jdbc:postgresql://db:5432/sonar
                - SONARQUBE_JDBC_USERNAME=sonar
                - SONARQUBE_JDBC_PASSWORD=sonar
              volumes:
                - sonarqube_conf:/opt/sonarqube/conf
                - sonarqube_data:/opt/sonarqube/data
                - sonarqube_extensions:/opt/sonarqube/extensions
                - sonarqube_bundled-plugins:/opt/sonarqube/lib/bundled-plugins
              depends_on:
                - db
              restart: unless-stopped

            db:
              image: postgres:13
              networks:
                - sonarnet
              environment:
                - POSTGRES_USER=sonar
                - POSTGRES_PASSWORD=sonar
                - POSTGRES_DB=sonar
              volumes:
                - postgresql:/var/lib/postgresql
                - postgresql_data:/var/lib/postgresql/data
              restart: unless-stopped

          networks:
            sonarnet:
              driver: bridge

          volumes:
            sonarqube_conf:
            sonarqube_data:
            sonarqube_extensions:
            sonarqube_bundled-plugins:
            postgresql:
            postgresql_data:
        dest: "{{ sonarqube_dir }}/docker-compose.yml"
        owner: "{{ admin_user }}"
        group: "{{ admin_user }}"
        mode: "0644"
      notify: restart sonarqube

    - name: Create SonarQube management scripts
      copy:
        content: |
          #!/bin/bash
          # SonarQube Management Script

          cd {{ sonarqube_dir }}

          case "$1" in
            start)
              echo "Starting SonarQube..."
              docker-compose up -d
              ;;
            stop)
              echo "Stopping SonarQube..."
              docker-compose down
              ;;
            restart)
              echo "Restarting SonarQube..."
              docker-compose down
              docker-compose up -d
              ;;
            status)
              echo "SonarQube Status:"
              docker-compose ps
              ;;
            logs)
              echo "SonarQube Logs:"
              docker-compose logs -f
              ;;
            *)
              echo "Usage: $0 {start|stop|restart|status|logs}"
              exit 1
              ;;
          esac
        dest: "{{ sonarqube_dir }}/manage-sonarqube.sh"
        owner: "{{ admin_user }}"
        group: "{{ admin_user }}"
        mode: "0755"

    - name: Create systemd service for SonarQube
      copy:
        content: |
          [Unit]
          Description=SonarQube Docker Compose Service
          Requires=docker.service
          After=docker.service

          [Service]
          Type=oneshot
          RemainAfterExit=yes
          WorkingDirectory={{ sonarqube_dir }}
          ExecStart=/usr/bin/docker-compose up -d
          ExecStop=/usr/bin/docker-compose down
          User={{ admin_user }}
          Group={{ admin_user }}

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/sonarqube.service
      notify:
        - reload systemd
        - enable sonarqube service

    - name: Stop any existing SonarQube containers
      command: docker-compose down
      args:
        chdir: "{{ sonarqube_dir }}"
      become_user: "{{ admin_user }}"
      ignore_errors: yes

    - name: Start SonarQube services
      command: docker-compose up -d
      args:
        chdir: "{{ sonarqube_dir }}"
      become_user: "{{ admin_user }}"

    - name: Wait for SonarQube to be healthy
      uri:
        url: "http://localhost:9000/api/system/status"
        method: GET
        timeout: 10
      register: sonarqube_status
      until: sonarqube_status.status == 200 and sonarqube_status.json.status == "UP"
      retries: 30
      delay: 30
      ignore_errors: yes

    - name: Display SonarQube status
      debug:
        msg: |
          SonarQube Status: {{ sonarqube_status.json.status | default('UNKNOWN') }}
          Health: {{ sonarqube_status.json.health | default('UNKNOWN') }}

    - name: Show running containers
      command: docker-compose ps
      args:
        chdir: "{{ sonarqube_dir }}"
      become_user: "{{ admin_user }}"
      register: containers_status

    - name: Display container status
      debug:
        var: containers_status.stdout_lines

  handlers:
    - name: reload sysctl
      command: sysctl -p

    - name: restart sonarqube
      command: docker-compose restart
      args:
        chdir: "{{ sonarqube_dir }}"
      become_user: "{{ admin_user }}"

    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: enable sonarqube service
      systemd:
        name: sonarqube
        enabled: yes
